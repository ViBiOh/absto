package model

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Item) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 8 {
		err = msgp.ArrayError{Wanted: 8, Got: zb0001}
		return
	}
	z.Date, err = dc.ReadTime()
	if err != nil {
		err = msgp.WrapError(err, "Date")
		return
	}
	z.ID, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	z.NameValue, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "NameValue")
		return
	}
	z.Pathname, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Pathname")
		return
	}
	z.Extension, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Extension")
		return
	}
	z.SizeValue, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "SizeValue")
		return
	}
	z.FileMode, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "FileMode")
		return
	}
	z.IsDirValue, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "IsDirValue")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Item) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 8
	err = en.Append(0x98)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Date)
	if err != nil {
		err = msgp.WrapError(err, "Date")
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	err = en.WriteString(z.NameValue)
	if err != nil {
		err = msgp.WrapError(err, "NameValue")
		return
	}
	err = en.WriteString(z.Pathname)
	if err != nil {
		err = msgp.WrapError(err, "Pathname")
		return
	}
	err = en.WriteString(z.Extension)
	if err != nil {
		err = msgp.WrapError(err, "Extension")
		return
	}
	err = en.WriteInt64(z.SizeValue)
	if err != nil {
		err = msgp.WrapError(err, "SizeValue")
		return
	}
	err = en.WriteUint32(z.FileMode)
	if err != nil {
		err = msgp.WrapError(err, "FileMode")
		return
	}
	err = en.WriteBool(z.IsDirValue)
	if err != nil {
		err = msgp.WrapError(err, "IsDirValue")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Item) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 8
	o = append(o, 0x98)
	o = msgp.AppendTime(o, z.Date)
	o = msgp.AppendString(o, z.ID)
	o = msgp.AppendString(o, z.NameValue)
	o = msgp.AppendString(o, z.Pathname)
	o = msgp.AppendString(o, z.Extension)
	o = msgp.AppendInt64(o, z.SizeValue)
	o = msgp.AppendUint32(o, z.FileMode)
	o = msgp.AppendBool(o, z.IsDirValue)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Item) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 8 {
		err = msgp.ArrayError{Wanted: 8, Got: zb0001}
		return
	}
	z.Date, bts, err = msgp.ReadTimeBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Date")
		return
	}
	z.ID, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	z.NameValue, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "NameValue")
		return
	}
	z.Pathname, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pathname")
		return
	}
	z.Extension, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Extension")
		return
	}
	z.SizeValue, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "SizeValue")
		return
	}
	z.FileMode, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "FileMode")
		return
	}
	z.IsDirValue, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "IsDirValue")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Item) Msgsize() (s int) {
	s = 1 + msgp.TimeSize + msgp.StringPrefixSize + len(z.ID) + msgp.StringPrefixSize + len(z.NameValue) + msgp.StringPrefixSize + len(z.Pathname) + msgp.StringPrefixSize + len(z.Extension) + msgp.Int64Size + msgp.Uint32Size + msgp.BoolSize
	return
}
